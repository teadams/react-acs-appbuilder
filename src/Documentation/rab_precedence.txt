 // scope 
 //   rab (at each level)
 //   component (at each level)
 //   product (at each level)
 //   User (at each level)
     
 // timing
 //  static
 //  instance
 //  dynamic

// Precedence - on a per attribute basis
// BUG - merge can only be done at the current level
//     (you don't know the lower level component information)
 // static 
     // rab - app params, core data model  
     // component - by component_model_name (*lost with props)
     // product - NA
     // User - NA
 // instance - does not change with input
     // rab  - NA
     // component - by component_model/name (*lost with props)
     // product - app_parameters, models
     // User - NA
 // dynamic (state, context)
     // rab  - NA
     // component - ?? would change with user inputs ??
     // product - NA
     // User - State, Context, Props (prior props overriden
        by current props on a per attribute basis) 


- ACS (static)
- App specific defaults (static)
  - Language/Localization*
  - Environment specific (model, dev, production)
- Tenant defaults (instance)
  - Language/Localization*
- Subsite/group defaults (instance)
- ACS specific component input (menu item) (dynamic)
- App specific component input (menu item) (dynamic)

- User preferences (dynamic)
- User mode (view, edit) (dynamic)

- Application Parameters
- Component Imputs (Menus)
    - Menu_lists
    - menu_items
- Layouts
    - Layout Components
    - Properties
    - Panes List
- Panes
    - Pane Components
    - Properties
    - Object_type
-Object_types
    - Properties
    - List Components
    - Field List (Sections)
- Field List (Sections)
    - properties 
    - Section Components
    - Fields
Fields  
    - Properties
    - Field Components
    - Display
Display
  - Mode (View,Edit,Create,CSV)
  - Application/Mobile
  - Visual specifics (show name and value)
  - Type (Image, Text, File)
Layout
  - Pane
    - Object Component
        -Sections
        - fields
        - Display



Injected anywhere


component definition 
  - transformation of individual names override full_model override model_name on a per attribute basis

interaction between levels
  - object_type is passed down through levels as is
  - data is passed down, but may change (list, row, field)
  - field_list -> field 
  - api_options - what will be sent to the api. 
  - component_model - serves to move the props from the upper level down. 
  - BUG - remaining props. props that are not used at that
        level should pass down so they fall in the right heirarchy. Falls under general bug that everything
        should be calculated only at the given level.
        (approach, convert inputs to model based on level
          prefix(_list,_field_,row) and then can just pass
          down model.  Also ensure props at lower levels
          override upper)

what is all levels
  - status - app_params
  - instance -  all levels need
      - styles?
      - selected menu
  - dynamic -
      - context(sort_of)
      - debug_mode

Pretransformations on user input
 -- field - calculate things that impact the display (edit_p)
 -- menu - build final rab_model using individual, named and model

Preventing rerenders
-- Option 1save input component model in state
 

Protecting accidently chaning object values
-- saving in state - -- update state if it changes
-- use for api_object, component_model


// this is where we can do logic such as something
// define in the fields meta to the actual values.
// unless we want server to build it. seems to 
// be combinding static data (defined in the metadat)
// with instance specific (overrides)
// For props, we'd always have to do this in real time.
// For the metadata and level component, 
// a possible performance enhancement
// is to do this only once (by server or on load)
